// <auto-generated />
using System;
using Fueller.Infrastructure.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fueller.Infrastructure.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(FuellerDbContext))]
    partial class FuellerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fueller.Domain.Model.Forecourt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Forecourts", (string)null);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Lane", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForecourtId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ForecourtId");

                    b.ToTable("Lanes", (string)null);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Pump", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LaneId");

                    b.ToTable("Pumps", (string)null);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DateTimeCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateTimeFilling")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ForecourtId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfLitresDispensed")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PumpId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ForecourtId");

                    b.HasIndex("PumpId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer");

                    b.Property<int>("TankCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Fueller.Domain.Model.Vehicles.Car", b =>
                {
                    b.HasBaseType("Fueller.Domain.Model.Vehicles.Vehicle");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Vehicles.Hgv", b =>
                {
                    b.HasBaseType("Fueller.Domain.Model.Vehicles.Vehicle");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Vehicles.Van", b =>
                {
                    b.HasBaseType("Fueller.Domain.Model.Vehicles.Vehicle");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Fueller.Domain.Model.Lane", b =>
                {
                    b.HasOne("Fueller.Domain.Model.Forecourt", "Forecourt")
                        .WithMany("Lanes")
                        .HasForeignKey("ForecourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forecourt");
                });

            modelBuilder.Entity("Fueller.Domain.Model.Pump", b =>
                {
                    b.HasOne("Fueller.Domain.Model.Lane", "Lane")
                        .WithMany("Pumps")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lane");
                });

            modelBuilder.Entity("Fueller.Domain.Model.Transaction", b =>
                {
                    b.HasOne("Fueller.Domain.Model.Forecourt", null)
                        .WithMany("Transactions")
                        .HasForeignKey("ForecourtId");

                    b.HasOne("Fueller.Domain.Model.Pump", null)
                        .WithMany()
                        .HasForeignKey("PumpId");

                    b.HasOne("Fueller.Domain.Model.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Fueller.Domain.Model.Forecourt", b =>
                {
                    b.Navigation("Lanes");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Fueller.Domain.Model.Lane", b =>
                {
                    b.Navigation("Pumps");
                });
#pragma warning restore 612, 618
        }
    }
}
